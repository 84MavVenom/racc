#!/usr/local/bin/ruby
#
# $Id$
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the terms of
# the GNU LGPL, Lesser General Public License version 2.1.
# For details of LGPL, see the file "COPYING".
#

require 'racc'
require 'racc/grammarfileparser'
require 'racc/parser'
require 'getoptlong'

def main
  options = parse_options()
  usage 0 if options['--help']
  if options['--version']
    puts "racc version #{Racc::Version}"
    exit 0
  end
  # Racc.const_set :Racc_No_Extentions, options['--no-extensions']
  if options['--runtime-version']
    printf "racc runtime version %s (rev. %s); %s\n",
           Racc::Parser::Racc_Runtime_Version,
           Racc::Parser::Racc_Runtime_Revision,
           if Racc::Parser.racc_runtime_type == 'ruby'
             sprintf('ruby core version %s (rev. %s)',
                     Racc::Parser::Racc_Runtime_Core_Version_R,
                     Racc::Parser::Racc_Runtime_Core_Revision_R)
           else
             sprintf('c core version %s (rev. %s)',
                     Racc::Parser::Racc_Runtime_Core_Version_C,
                     Racc::Parser::Racc_Runtime_Core_Revision_C)
           end
    exit 0
  end
  if options['--copyright']
    puts "racc version #{Racc::Version}"
    puts "#{Racc::Copyright} <aamine@loveruby.net>"
    exit 0
  end
  usage(1, 'no grammar file given') if ARGV.empty?
  usage(1, 'too many grammar files given') if ARGV.size > 1
  path = ARGV[0]
  begin
    _main path, options
  rescue Racc::Error, Errno::ENOENT, Errno::EPERM => err
    raise if $DEBUG or options['-D']
    lineno = err.message.slice(/\A\d+:/).to_s
    $stderr.puts "#{File.basename $0}: #{path}:#{lineno} #{err.message.strip}"
    exit 1
  end
end

def _main(path, options)
  verbose = options['--output-status']
  debug_flags = Racc::DebugFlags.parse_option_string(options['-D'] || '')
  $stdout.sync = true if debug_flags.any?
  profiler = RaccProfiler.new(options['-P'])
  src = File.read(path)
  filename = File.basename(path)

  $stderr.puts 'Parsing grammar file...' if verbose
  result = profiler.section('parse') {
    Racc::GrammarFileParser.new(debug_flags).parse(src, filename)
  }
  if options['--check-only']
    $stderr.puts 'syntax ok'
    exit 0
  end

  $stderr.puts 'Initializing a state machine...' if verbose
  states = profiler.section('nfa') {
    Racc::States.init(result.grammar)
  }

  $stderr.puts "Resolving #{@statetable.size} states..." if verbose
  profiler.section('dfa') {
    states.determine
  }

  $stderr.puts 'Creating parser file...' if verbose
  params = result.params.dup
  # Overwrites parameters given by a grammar file with command line options.
  params.superclass = options['--super'] if options['--super']
  params.omit_action_call = true if options['--omit-actions']
  # From command line option
  if options['--executable']
    params.make_executable = true
    params.interpreter = options['--executable']
  end
  params.debug_parser = true if (options['--debug'] || options['-g'])
  params.convert_line = true if options['--line-convert']
  params.convert_line_all = true if options['--line-convert-all']
  params.embed_runtime = true if options['--embed']
  generator = Racc::ParserFileGenerator.new(states, params)
  destpath = options['--output-file'] || make_filename(path, '.tab.rb')
  generator.generate_parser_file destpath

  profiler.report if options['-P']
  if options['--verbose']
    $stderr.puts 'Creating log file...' if verbose
    output_fn = options['--log-file'] ||
        make_filename(options['--output'] || filename, '.output')
    File.open(output_fn, 'w') {|f|
      Racc::LogFileGenerator.new(states, debug_flags).output f
    }
  end
  if debug_flags.status_logging
    log_useless states.grammar
    log_conflict states
  else
    report_useless states.grammar
    report_conflict states
  end
end

def make_filename(path, suffix)
  path.sub(/(?:\..*?)?\z/, suffix)
end

def report_conflict(states)
  if states.should_report_srconflict?
    $stderr.puts "#{states.n_srconflicts} shift/reduce conflicts"
  end
  if states.rrconclict_exist?
    $stderr.puts "#{states.n_rrconflicts} reduce/reduce conflicts"
  end
end

def log_conflict(states)
  logging('w') {|f|
    f.puts "ex#{states.grammar.n_expected_srconflicts}"
    if states.should_report_srconflict?
      f.puts "sr#{states.n_srconflicts}"
    end
    if states.rrconflict_exist?
      f.puts "rr#{states.n_rrconflicts}"
    end
  }
end

def report_useless(grammar)
  if grammar.useless_nonterminal_exist?
    $stderr.puts "#{grammar.n_useless_nonterminals} useless nonterminals"
  end
  if grammar.useless_rule_exist?
    $stderr.puts "#{grammar.n_useless_rules} useless rules"
  end
  if grammar.start.useless?
    $stderr.puts 'fatal: start symbol does not derive any sentence'
  end
end

def log_useless(grammar)
  logging('a') {|f|
    if grammar.useless_nonterminal_exist?
      f.puts "un#{grammar.n_useless_nonterminals}"
    end
    if grammar.useless_rule_exist?
      f.puts "ur#{grammar.n_useless_rules}"
    end
  }
end

def logging(mode, &block)
  File.open("log/#{File.basename(ARGV[0])}", mode, &block)
end

#
# Command Line Option Processing
#

Racc_Options = <<EOS
  o -t --debug            - Outputs parser for user-level debugging.
  o -g -                  - Equivalent to -t (obsolete).
  o -o --output-file <outfile>  The file name of output [<fname>.tab.rb]
  o -e --executable <rubypath>  Inserts #! line in output (Use 'ruby' to default).
  o -E --embedded         - Outputs a file which don't need Racc runtime.
  x -r --runtime <file>     Uses <file> instead of 'racc/parser'
  o -l --no-line-convert  - Never convert line numbers (for ruby<=1.4.3).
  o -c --line-convert-all - Converts line numbers also header and footer.
  x -s --super <super>      Uses <super> instead of Racc::Parser
  o -a --no-omit-actions  - Never omit actions if we can.
  x -  --omit-actions     - Always omit actions if we can.

  o -v --verbose          - Creats <filename>.output log file.
  o -O --log-file <fname>   The file name of log file [<fname>.output]

  o -C --check-only       - Checks syntax and quit immediately.
  o -S --output-status    - Outputs internal status time to time.
  x -  --no-extentions    - Racc run without any Ruby extention.
  o -  --version          - Prints version and quit.
  o -  --runtime-version  - Prints runtime version and quit.
  o -  --copyright        - Prints copyright and quit.
  x -h --help             - Prints this message and quit.
  x -P -                  - Reports profile.
  x -D - <flags>            Sets (Racc's) debug flags
EOS

def parse_options
  gl_args = Racc_Options.map {|line|
              next if line.strip.empty?
              disp, sopt, lopt, takearg, doc = line.strip.split(/\s+/, 5)
              a = []
              a.push lopt unless lopt == '-'
              a.push sopt unless sopt == '-'
              a.push takearg == '-' ?
                     GetoptLong::NO_ARGUMENT : GetoptLong::REQUIRED_ARGUMENT
              a
            }.compact
  getopt = GetoptLong.new(*gl_args)
  getopt.quiet = true
  opt = {}
  begin
    getopt.each do |name, arg|
      raise GetoptLong::InvalidOption, "#{name} given twice" if opt.key?(name)
      opt[name] = arg.empty?() ? true : arg
    end
  rescue GetoptLong::AmbigousOption, GetoptLong::InvalidOption,
         GetoptLong::MissingArgument, GetoptLong::NeedlessArgument
    usage 1, $!.message
  end
  opt['--line-convert'] = true
  if opt['--no-line-convert']
    opt['--line-convert'] = false
    opt['--line-convert-all'] = false
  end
  opt['--omit-actions'] = false if opt['--no-omit-actions']
  opt
end

def usage(status, msg = nil)
  f = (status == 0 ? $stdout : $stderr)
  f.puts "#{File.basename $0}: #{msg}" if msg
  f.puts 'Usage: racc [options] <grammar file>'
  f.puts 'Options:'
  Racc_Options.each do |line|
    next if line.strip.empty?
    show_p, sopt, lopt, takearg, description = line.strip.split(/\s+/, 5)
    next if show_p == 'x'
    optdesc = [
      [ (sopt == '-') ? nil : sopt,
        (lopt == '-') ? nil : lopt ].compact.join(','),
      (takearg == '-') ? nil : takearg
    ].compact.join(' ')
    f.printf "  %-27s %s\n", optdesc, description
  end
  exit status
end

#
# Profile
#

class RaccProfiler
  def initialize(really)
    @really = really
    @log = []
    unless ::Process.respond_to?(:times)
      # Ruby 1.6
      @class = ::Time
    else
      @class = ::Process
    end
  end

  def section(name)
    if @really
      t1 = @class.times.utime
      result = yield
      t2 = @class.times.utime
      @log.push [name, t2 - t1]
      result
    else
      yield
    end
  end

  def cumulative_time
    t = @log.inject(0) {|sum, i| sum + i }
    t == 0 ? 0.01 : t
  end

  def report
    f = $stderr
    total = cumulative_time()
    f.puts '--task-----------+--sec------+---%-'
    @log.each do |arr|
      name, time = arr
      f.printf "%-19s %s %3d%%\n", name, pjust(time,4,4), (time/total * 100).to_i
    end
    f.puts '-----------------+-----------+-----'
    f.printf "%-20s%s\n", 'total', pjust(total,4,4)
  end

  private

  def pjust(num, i, j)
    m = /(\d+)(\.\d+)?/.match(num.to_s)
    str = m[1].rjust(i)
    str.concat m[2].ljust(j+1)[0,j+1] if m[2]
    str
  end
end

#
# Application Entry Point
#

main
