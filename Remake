#
# racc/Remake
#

mount 'amstd'
mount 'strscan'


environ( 'rubyprog/racc' ) {

  $version   = '1.3.12'

  $packaging = %w( single multi )
  $type      = 'ruby'
  $instpath  = 'racc'
  $topfile   =  nil

  $extern_libs = %w( raccrt strscan amstd )   # strscan is optional

  $view_name = 'Racc'
  $category  = 'parser generator'
  $format    = 'ruby script, ruby extention'
  $require   = 'ruby(>=1.4), C compiler'
  $license   = 'LGPL'

  $manual    =  true

  $description = {}
  $description['ja'] = <<'----'
Ruby 用のパーザジェネレータ (yacc みたいなの) です。
一部に高速化のため拡張モジュールを使っていますが大部分は
Ruby で書かれていて、出力も Ruby スクリプトです。Racc で
生成したパーサはそれ単体でも動かすことができますし、専用の
ランタイム(拡張モジュール)があればさらに高速に動きます。
Ruby で書かれたパーサの中では間違いなく最速です。

<h2>状況とか？</h2>
<p>
久しぶりにマイナーバージョンアップして 1.3 になりました。
スキャナから yield でトークンを渡せるようになったのが最大のメリットです。

<h2>今後やりたいこと</h2>
<ul>
<li>いろんなところのエラーチェックをこまめにする
<li>val をトークンの名前(など)で得られるようにする
<li>対話的なステートマシンモニタ
<li>衝突した場合に、衝突する入力トークンの例を表示する
</ul>
----
  $description['en'] = <<'----'
Racc (Ruby yACC) is a LALR(1) Parser Generator for Ruby.
This tool is written in Ruby and outputs Ruby scripts.
----


  $bin = %w( racc )

  $mainrb = %w(
    compiler.rb
    grammer.rb
    info.rb
    iset.rb
    output.rb
    parser.rb
    raccs.rb
    state.rb
    ucodep.rb
  )

  $src = %w(
    build
  )
  $genrb = %w( raccp.rb )

  $rb = $mainrb + $genrb

  $tool = %w(
    pack.rb
  )

  $misc = %w(
    y2racc
    racc2y
  )

  $text = %w(
    BUGS.ja
    BUGS.en
  )


  def build
    upver $src
    upemail $src
    command 'ruby build'
  end

  def update
    build
    upver $bin, $mainrb, %w( README.ja README.en )
    upemail $bin, $mainrb, %w( README.ja README.en )
    $<raccrt>.update
  end

  def set_files_etc( packdir )
    cp $src,                   isdir(packdir, 'src')
    cp Dir.glob('sample/*.y'), isdir(packdir, 'sample')
    cp indir('misc', $misc),   isdir(packdir, 'misc')
  end

  def pack
    super
    $<raccrt>.pack
  end

}


environ( 'rubyprog/raccrt' ) {

  $version = $<racc>.$version

  $packaging   = %w( single )
  $type        = 'ruby'
  $package     = 'raccrt'
  $instpath    = 'racc'
  $topfile     =  nil
  $license     = 'LGPL'

  $view_name = 'Racc Runtime'

  $rb = %w( parser.rb )

  def update
    upver $rb
    upemail $rb
    $<cparse>.update
  end

  def set_files_doc( dest )
    set_files_text dest
  end


  environ( 'cparse' ) {

    $dir      = $dir + '/cp'

    $type     = 'ext'
    $package  = 'raccrt'
    $instpath = 'racc'
    $topfile  =  nil

    $c        = %w( cparse.c )
    $tools    = %w( MANIFEST extconf.rb )

    def update
      upver $c
      upemail $c
    end

    def set_files( packdir )
      raise 'cparse.set_files called???'
    end

  }
}
